public interface Expression
{
}

//PRINT-EXPRESSISON

public class PrintExpression implements Expression
{
	private Expression expression
	
	public PrintExpression(Expression e)
	{
		expression = e;
	}

	public String getPrintExpression() 
	{return ("print" + "(" + expression + ")");} 
}

//EXPRESSION

public class SimpleExpression implements Expression
{
	private SimpleExpression simple-expression;
	
	public SimpleExpression(SimpleExpression s)
	{
		simple-expression = s;	
	}

	public String getSimpleExpression() {return simple-expression;}
}

public class EqualsExpression implements Expression
{
	private SimpleExpression simple-expression;
	private Expression expression
	
	public EqualsExpression(SimpleExpression s, Expression e)
	{
		simple-expression = s;
		expression = e;	
	}

	public String getEqualsExpression() 
	{return (simple-expression + "==" + expression)}
}

public class LessThanExpression implements Expression
{
	private SimpleExpression simple-expression;
	private Expression expression
	
	public LessThanExpression(SimpleExpression s, Expression e)
	{
		simple-expression = s;
		expression = e;	
	}

	public String getLessThanExpression() 
	{return (simple-expression + "<" + expression)}
}

//SIMPLE-EXPRESSION

public class TermExpression implements Expression
{
	private Term term;

	public Term(Term t)
	{
		term = t;
	}

	public String getTermExpression() {return term;}
}


public class OrExpression implements Expression
{
	private Term term;
	private SimpleExpression simple-expression;

	public OrExpression(Term t, SimpleExpression s)
	{
		term = t;
		simple-expression = s;
	}

	public String getOrExpression() {return (term + "or" + simple-expression);}
}

public class PlusExpression implements Expression
{
	private Term term;
	private SimpleExpression simple-expression;

	public PlusExpression(Term t, SimpleExpression s)
	{
		term = t;
		simple-expression = s;
	}

	public String getPlusExpression() {return (term + "+" + simple-expression);}
}

public class MinusExpression implements Expression
{
	private Term term;
	private SimpleExpression simple-expression;

	public MinusExpression(Term t, SimpleExpression s)
	{
		term = t;
		simple-expression = s;
	}

	public String getMinusExpression() {return (term + "-" + simple-expression);}
}

//TERM

public class FactorExpression implements Expression
{
	private Factor factor;

	public FactorExpression(Factor f)
	{
		factor = f;
	}

	public String getFactorExpression() {return factor;}
}

public class AndExpression implements Expression
{
	private Factor factor;
	private Term term;

	public AndExpression(Factor f, Term t)
	{
		factor = f;
		term = t;
	}

	public String getAndExpression() {return (factor + "and" + term);}
}

public class TimesExpression implements Expression
{
	private Factor factor;
	private Term term;

	public TimesExpression(Factor f, Term t)
	{
		factor = f;
		term = t;
	}

	public String getTimesExpression() {return (factor + "*" + term);}
}


public class DivideExpression implements Expression
{
	private Factor factor;
	private Term term;

	public DivideExpression(Factor f, Term t)
	{
		factor = f;
		term = t;
	}

	public String getDivideExpression() {return (factor + "/" + term);}
}

//FACTOR

public class LiteralExpression implements Expression
{
	private Literal literal;

	public LiteralExpression(Token l)
	{
		literal = l.getvalue();
	}

	public String getLiteralExpression() {return literal}
}

public class NotExpression implements Expression
{
	private Not not;

	public NotExpression(Not n)
	{
		not = n;
	}

	public String getNotExpression() {return not}
}

public class HyphenExpression implements Expression
{
	private Factor factor;

	public HyphenExpression(Factor f)
	{
		factor = f;
	}

	public String getHyphenExpression() {return ("-"+factor);}
}

public class IdentifierExpression implements Expression
{
	private Identifier identifier;
	private Identifier_P identifier_p;
	private ArgumentList argument-list;

	public IdentifierExpression(Identifier i)
	{
		identifier = i;
	}

	public IdentifierExpression(Identifier i, ArgumentList a,)
	{
		identifier = i;
		argument-list = a;
	}

	public String getIdentifierExpression() {return identifier;}
	public String getIdentifierExpression() 
	{return (identifier + "(" + argument-list + ")");}
}

public class IfExpression implements Expression
{
	private IfExpression if-expression;
	private ElseExpression else-expression;
	private	ThenExpression then-expression;

	public IfExpression(IfExpression i, ElseExpression e, ThenExpression t)
	{
		if-expression = i;
		else-expression = e;
		then-expression = t;
	}

	public String getIfExpression()
	{return ("if" + "(" + if-expression + ")" + else-expression 
	 + "else" + then-expression);}
}

public class ParenExpression implements Expression
{
	private Expression expression;

	public ParenExpression(Expression e)
	{
		expression = e;
	}

	public String getParenExpression() {return ("(" + expression + ")");}
}

//ARGUMENT-LIST

public class ArgListExpression implements Expression
{
	private FormalArgs = formal-args;

	public ArgListExpression(FormalArgs f)
	{
		formal-args = f;
	}

	public String getArgListExpression() {return formal-args}
}

//FORMAL-ARGUMENTS

public class FormalArgsExpression implements Expression
{
	private Expression expression;
	private FormalArgs formal-args;

	public FormalArgsExpression(Expression e)
	{
		expression = e;
	}

	public FormalArgsExpression(Expression e, FormalArgs f)
	{
		expression = e;
		formal-args = f;
	}

	public String getFormalArgsExpression() {return expression;}
	public String getFormalArgsExpression()
	{return (expression + "," + formal-args);}
}

//BOOLEAN-LITERAL

public class BooleanExpression implements Expression
{
	private boolean bool;

	public BooleanExpression(Token t)
	{
		bool = t.value();
	}

	public boolean getBoolExpression() {return bool}
}

//INTEGER-LITERAL

public class IntegerExpression implements Expression
{
	private int integer;

	public IntegerExpression(Token t)
	{
		integer = t.value();
	}

	public boolean getIntExpression() {return integer}










