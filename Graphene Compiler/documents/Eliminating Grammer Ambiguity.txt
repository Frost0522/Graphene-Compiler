To begin eliminating grammer ambiguity we started with changing the definition list and argument list. Instead of saying

that each list begins with epsilon, this was changed to each list begins with something, or epsilon (nothing). From here
 
the parameter list was changed in the same fashion, the list begins with formal parameters or no parameters ("ε"). Another

issue that must be taken into account is the formal parameters definition, because both tokens for each rule begin with

ID-WITH-TYPE, we must left factor. We create a new definition to eliminate left recursion in formal parameters, 

ID-WITH-TYPE'. We then substitute all of the rules for ID-WITH-TYPE and add them to ID-WITH-TYPE'. This same process is then

carried out for definitions SIMPLE-EXPRESSION, TERM, FACTOR, IDENTIFIER, and EXPRESSION.

-----------------------------------------------------------------------------------------------------------------------------              

              PROGRAM ::= DEFINITION-LIST

      DEFINITION-LIST ::= DEFINITION DEFINITION-LIST
                        | ε

           DEFINITION ::= "fn" IDENTIFIER "(" PARAMETER-LIST ")" "->" TYPE
                              BODY

       PARAMETER-LIST ::= FORMAL-PARAMETERS
                        | "ε"

    FORMAL-PARAMETERS ::= ID-WITH-TYPE ID-WITH-TYPE'    

	   ID-WITH-TYPE' ::= "," FORMAL-PARAMETERS
					| ε

         ID-WITH-TYPE ::= IDENTIFIER ":" TYPE

                 TYPE ::= "integer"
                        | "boolean"

                 BODY ::= PRINT-EXPRESSION BODY
                        | EXPRESSION

     PRINT-EXPRESSION ::= "print" "(" EXPRESSION ")"

           EXPRESSION ::= SIMPLE-EXPRESSION SIMPLE-EXPRESSION'

   SIMPLE-EXPRESSION' ::= "==" EXPRESSION
					| "<" EXPRESSION
					| ε


    SIMPLE-EXPRESSION ::= TERM TERM'

	           TERM' ::= "or" SIMPLE-EXPRESSION
					| "+" SIMPLE-EXPRESSION
					| "-" SIMPLE-EXPRESSION
					| ε

                 TERM ::= FACTOR FACTOR'

              FACTOR' ::= "and" TERM
                        | "*" TERM
                        | "/" TERM
					| ε

               FACTOR ::= LITERAL
                        | "not" FACTOR
                        | "-" FACTOR
                        | IDENTIFIER IDENTIFIER'
                        | "if" "(" EXPRESSION ")" EXPRESSION "else" EXPRESSION
                        | "(" EXPRESSION ")"

             IDENTIFIER' ::= "(" ARGUMENT-LIST ")"
                        | ε
	
        ARGUMENT-LIST ::= FORMAL-ARGUMENTS
                        | ε

     FORMAL-ARGUMENTS ::= EXPRESSION EXPRESSION'

          EXPRESSION' ::= "," FORMAL-ARGUMENTS
                        | ε

              LITERAL ::= BOOLEAN-LITERAL
                        | INTEGER-LITERAL