// A cicular number is a number who's power is that number and also ends in that number as well.
// An example of this would be 6^(6) = 46,656. The ones place is also 6, it is a circular number.

// Exponent arithmetic function from lib.gr.

fn EXP(m : integer, n : integer) -> integer
   if (n == 0) 1 else m * EXP(m, n-1)

// Constant for power value

fn main-helper(power : number) -> integer power

// Modulus by hand from graphene programs.zip

fn mod-helper(m : integer, n : integer) -> integer
   if (m < n)
      m
   else
      mod-helper(m-n, n)

fn mod(m : integer, n : integer) -> integer
   mod-helper(m, n)

fn main(num : integer) -> integer
   if ( mod(((EXP(num, main-helper(num))) - num), 10) == 0 )
      num 
      print(" is a circular number.")
   else
      num 
      print(" is not a circular number.")



